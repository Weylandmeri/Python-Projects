import pygame
import numpy as np

pygame.init()

WIDTH, HEIGHT = 512,512
WINDOW = pygame.display.set_mode((WIDTH, HEIGHT))
numElems = 20

def draw(screen, x, y, x1, x2):
	pygame.draw.line(screen, "white", (x, y), (x1, x2), 5 )

poin = []

def midpoint(point1,point2):
	xcenter = (point1[0] + point2[0]) / 2
	ycenter = (point1[1] + point2[1]) / 2
	return (xcenter, ycenter)

def transform(poin):
	idx = np.round(np.linspace(0, len(poin) - 1, numElems)).astype(int)

	points = []
	for i in idx:
		points.append(poin[i])
	points2 = []

	for point in points:
		point22 = point[0] - 256
		point23 = -point[1] + 256
		points2.append((point22, point23))

	xmin = min(point[0] for point in points2)
	xmax = max(point[0] for point in points2)
	ymin = min(point[1] for point in points2)
	ymax = max(point[1] for point in points2)
	xlen = xmax - xmin
	ylen = ymax - ymin

	ratio = ylen/xlen

	if ratio<5:
		diaganols = [(xmin,ymin), (xmax,ymax)]
		midpoints = midpoint(diaganols[0], diaganols[1])
		dvector = ((0-midpoints[0]), 0-midpoints[1])
		pointstrans = []

		xfac = 512/xlen
		yfac = 512/ylen

		for point in points2:
			x = point[0]+dvector[0]
			y = point[1]+dvector[1]
			pointstrans.append((x,y))

		xmod2 = []

		for point in pointstrans:
			x = point[0]*xfac*.9
			y = point[1]*yfac*.9
			xmod2.append((x,y))
	else:
		xmod2 = points2
	return xmod2

def comparison(mystery):
	zero = [(147.64408163265307, 198.34434782608696), (76.1730612244898, 226.39304347826086), (-21.629387755102044, 230.4), (-96.86204081632654, 203.68695652173915), (-157.04816326530613, 158.27478260869566), (-202.18775510204085, 86.14956521739131), (-222.87673469387758, 11.35304347826087), (-230.4, -58.10086956521739), (-211.5918367346939, -127.55478260869567), (-185.26040816326534, -187.6591304347826), (-121.31265306122451, -227.7286956521739), (-27.271836734693878, -230.4), (51.722448979591846, -209.0295652173913), (119.43183673469387, -163.61739130434785), (181.49877551020413, -103.51304347826087), (219.11510204081634, -31.387826086956522), (230.4, 40.737391304347824), (205.94938775510207, 108.85565217391304), (170.21387755102043, 164.9530434782609), (117.55102040816327, 206.35826086956524)]
	one = [(-30, 171), (-29, 165), (-27, 154), (-27, 139), (-27, 119), (-27, 88), (-27, 65), (-27, 39), (-27, 15), (-26, -10), (-26, -29), (-25, -47), (-24, -64), (-24, -79), (-24, -90), (-24, -102), (-24, -111), (-24, -116), (-24, -120), (-24, -124)]
	two = [(-230.4, 100.43076923076923), (-215.04000000000002, 154.44395604395604), (-128.64000000000001, 208.45714285714286), (-57.6, 230.4), (24.96, 213.52087912087913), (86.4, 179.76263736263738), (120.96000000000001, 124.06153846153846), (117.11999999999999, 61.60879120879121), (82.56, -7.595604395604396), (42.239999999999995, -58.23296703296703), (-26.880000000000003, -110.55824175824176), (-80.64, -152.75604395604395), (-134.4, -193.26593406593406), (-188.16, -223.64835164835165), (-130.56, -230.4), (-36.48, -230.4), (28.8, -225.33626373626373), (99.84, -225.33626373626373), (165.12, -220.27252747252749), (230.4, -228.71208791208792)]
	three = [(-230.4, 124.68705882352941), (-200.74455445544555, 173.47764705882352), (-111.77821782178218, 206.00470588235294), (18.24950495049505, 230.4), (123.1841584158416, 215.49176470588236), (189.33861386138616, 168.0564705882353), (191.61980198019802, 105.71294117647058), (164.24554455445545, 51.501176470588234), (95.80990099009901, 9.487058823529411), (-4.562376237623763, -5.421176470588235), (95.80990099009901, -2.7105882352941175), (182.49504950495052, -24.395294117647058), (223.55643564356436, -69.12), (230.4, -126.04235294117646), (207.5881188118812, -177.54352941176472), (143.71485148514853, -208.71529411764706), (34.21782178217822, -230.4), (-72.9980198019802, -224.97882352941176), (-164.24554455445545, -195.16235294117647), (-218.9940594059406, -150.43764705882353)]
	four = [(-190.24730290456432, 230.4), (-190.24730290456432, 210.02448979591838), (-197.89543568464728, 166.13877551020408), (-207.45560165975104, 109.71428571428571), (-217.01576763485477, 56.42448979591837), (-226.5759336099585, 15.6734693877551), (-230.4, -9.40408163265306), (-230.4, -29.779591836734696), (-190.24730290456432, -31.3469387755102), (-88.90954356846474, -29.779591836734696), (48.75684647302904, -17.240816326530613), (169.21493775933612, -12.538775510204081), (230.4, -3.1346938775510202), (159.65477178423237, 180.24489795918367), (173.0390041493776, 119.11836734693878), (176.8630705394191, 9.40408163265306), (176.8630705394191, -100.31020408163265), (176.8630705394191, -169.27346938775509), (178.77510373443985, -206.88979591836735), (176.8630705394191, -230.4)]
	five = [(230.4, 225.74545454545455), (126.77511961722487, 227.29696969696968), (-102.52248803827752, 230.4), (-201.7377990430622, 219.53939393939393), (-214.9665071770335, 137.3090909090909), (-214.9665071770335, 62.836363636363636), (-225.99043062200957, 16.29090909090909), (-230.4, -25.599999999999998), (-168.66602870813395, 3.878787878787879), (-38.58373205741626, 36.46060606060606), (91.49856459330142, 45.769696969696966), (164.25645933014354, 19.39393939393939), (201.7377990430622, -24.048484848484847), (214.9665071770335, -73.6969696969697), (210.55693779904306, -126.44848484848484), (188.5090909090909, -172.99393939393937), (135.59425837320575, -211.78181818181818), (42.9933014354067, -228.84848484848484), (-67.24593301435407, -230.4), (-142.2086124401914, -214.88484848484848)]
	six = [(-35.03778801843318, 230.4), (-54.14930875576037, 220.00601503759395), (-141.21290322580646, 138.58646616541353), (-200.6709677419355, 46.77293233082707), (-226.15299539170508, -41.575939849624056), (-230.4, -121.26315789473684), (-213.4119815668203, -171.50075187969924), (-177.31244239631337, -202.6827067669173), (-126.34838709677419, -223.47067669172932), (-35.03778801843318, -230.4), (75.38433179723503, -218.2736842105263), (162.4479262672811, -176.69774436090225), (211.2884792626728, -126.46015037593986), (230.4, -72.7578947368421), (211.2884792626728, -32.91428571428571), (134.84239631336408, -6.929323308270677), (54.14930875576037, 5.196992481203007), (-56.27281105990784, -13.858646616541353), (-175.18894009216592, -77.95488721804512), (-224.0294930875576, -109.13684210526316)]
	seven = [(-230.4, 218.1301775147929), (-190.17142857142858, 218.1301775147929), (-144.45714285714286, 218.1301775147929), (-96.91428571428571, 218.1301775147929), (-34.74285714285714, 220.8568047337278), (43.885714285714286, 222.22011834319525), (120.68571428571427, 223.58343195266272), (181.02857142857144, 229.03668639053254), (223.08571428571426, 230.4), (230.4, 215.403550295858), (202.97142857142856, 175.8674556213018), (162.74285714285713, 122.698224852071), (126.17142857142856, 61.3491124260355), (87.77142857142857, -5.4532544378698224), (53.028571428571425, -62.71242603550296), (25.599999999999998, -103.61183431952662), (5.485714285714286, -148.60118343195265), (-3.657142857142857, -177.23076923076923), (-10.971428571428572, -201.77041420118346), (-20.114285714285714, -230.4)]
	eight = [(217.15862068965518, 158.60869565217394), (119.17241379310346, 210.36521739130436), (-42.37241379310345, 230.4), (-169.4896551724138, 205.35652173913044), (-230.4, 140.24347826086958), (-222.4551724137931, 66.78260869565217), (-150.95172413793102, 20.034782608695654), (-2.6482758620689655, -6.678260869565218), (137.7103448275862, -45.07826086956522), (203.91724137931035, -95.16521739130435), (230.4, -165.2869565217391), (150.95172413793102, -223.72173913043477), (18.53793103448276, -230.4), (-111.22758620689655, -207.02608695652174), (-185.3793103448276, -150.2608695652174), (-156.24827586206897, -73.4608695652174), (-66.20689655172414, -13.356521739130436), (37.07586206896552, 35.060869565217395), (143.00689655172414, 88.48695652173913), (227.75172413793103, 153.6)]
	nine = [(195.31370558375636, 196.94257425742575), (146.1928934010152, 216.71287128712873), (54.968527918781724, 230.4), (-33.91675126903554, 224.31683168316832), (-108.76751269035533, 203.02574257425744), (-178.9401015228426, 166.52673267326733), (-228.06091370558374, 113.2990099009901), (-230.39999999999998, 69.1960396039604), (-209.3482233502538, 29.655445544554457), (-153.21015228426396, 5.322772277227723), (-54.968527918781724, 5.322772277227723), (50.290355329949236, 31.176237623762376), (129.8192893401015, 76.8), (195.31370558375636, 158.92277227722772), (230.39999999999998, 213.6712871287129), (197.65279187817256, 136.11089108910892), (101.7502538071066, -58.55049504950496), (50.290355329949236, -158.92277227722772), (38.59492385786802, -196.94257425742575), (26.8994923857868, -230.4)]

	reflist = [zero,one,two,three,four,five,six,seven,eight,nine]

	numbers = [0,1,2,3,4,5,6,7,8,9]
	d = 0
	distances = []
	for j in range(len(reflist)):
		j = reflist[j]
		for i in range(numElems):
			distance = ((mystery[i][0] - j[i][0])**2+(mystery[i][1] - j[i][1])**2)**.5
			d+= distance
		distances.append(d)
		d = 0
	z = min(distances)
	y = numbers[distances.index(min(distances))]

	if z<3000:
		print(y)
	else:
		print("Not confident enough")

def main():
	running = True
	last_pos = None
	while running:
		cur = pygame.mouse.get_pos()
		click = pygame.mouse.get_pressed()
		mouseFocus = pygame.mouse.get_focused()
		for event in pygame.event.get():
			if event.type == pygame.QUIT:
				running = False
			if click[0]:
				if last_pos is not None:
					draw(WINDOW, cur[0], cur[1], last_pos[0], last_pos[1])
				last_pos = cur
				if mouseFocus == 0:
					last_pos = None
				poin.append(cur)
			if click[2]:
				poin.clear()
			if event.type == pygame.MOUSEBUTTONUP:
				last_pos = None
			if click[2]:
				WINDOW.fill("black")
			if event.type == pygame.KEYDOWN:
				if event.key == pygame.K_RETURN:
					mystery = transform(poin)
					comparison(mystery)
		pygame.display.update()
	pygame.quit()

main()